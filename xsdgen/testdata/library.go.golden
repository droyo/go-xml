// Code generated by xsdgen.test. DO NOT EDIT.

package ws

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Authors struct {
	Person []string `xml:"http://dyomedea.com/ns/library person"`
}

type BookType struct {
	Isbn       string     `xml:"http://dyomedea.com/ns/library isbn"`
	Title      string     `xml:"http://dyomedea.com/ns/library title"`
	Authors    Authors    `xml:"http://dyomedea.com/ns/library authors"`
	Characters Characters `xml:"http://dyomedea.com/ns/library characters"`
	Available  string     `xml:"available,attr"`
}

type Characters struct {
	Person []string `xml:"http://dyomedea.com/ns/library person"`
}

type Library struct {
	Book BookType `xml:"http://dyomedea.com/ns/library book"`
}

type Person struct {
	Name          string    `xml:"http://dyomedea.com/ns/library name"`
	Born          time.Time `xml:"http://dyomedea.com/ns/library born"`
	Dead          time.Time `xml:"http://dyomedea.com/ns/library dead,omitempty"`
	Qualification string    `xml:"http://dyomedea.com/ns/library qualification,omitempty"`
}

func (t *Person) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Person
	var layout struct {
		*T
		Born *xsdDate `xml:"http://dyomedea.com/ns/library born"`
		Dead *xsdDate `xml:"http://dyomedea.com/ns/library dead,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Born = (*xsdDate)(&layout.T.Born)
	layout.Dead = (*xsdDate)(&layout.T.Dead)
	return e.EncodeElement(layout, start)
}
func (t *Person) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Person
	var overlay struct {
		*T
		Born *xsdDate `xml:"http://dyomedea.com/ns/library born"`
		Dead *xsdDate `xml:"http://dyomedea.com/ns/library dead,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Born = (*xsdDate)(&overlay.T.Born)
	overlay.Dead = (*xsdDate)(&overlay.T.Dead)
	return d.DecodeElement(&overlay, &start)
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
