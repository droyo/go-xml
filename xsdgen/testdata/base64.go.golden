// Code generated by xsdgen.test. DO NOT EDIT.

package ws

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type MyType1 []byte

func (t *MyType1) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t MyType1) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type MyType2 struct {
	Value  []byte `xml:",chardata"`
	Length int    `xml:"length,attr,omitempty"`
}

func (t *MyType2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MyType2
	var layout struct {
		*T
		Value *xsdBase64Binary `xml:",chardata"`
	}
	layout.T = (*T)(t)
	layout.Value = (*xsdBase64Binary)(&layout.T.Value)
	return e.EncodeElement(layout, start)
}
func (t *MyType2) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MyType2
	var overlay struct {
		*T
		Value *xsdBase64Binary `xml:",chardata"`
	}
	overlay.T = (*T)(t)
	overlay.Value = (*xsdBase64Binary)(&overlay.T.Value)
	return d.DecodeElement(&overlay, &start)
}

type MyType3 struct {
	Value  time.Time `xml:",chardata"`
	Length int       `xml:"length,attr,omitempty"`
}

func (t *MyType3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MyType3
	var layout struct {
		*T
		Value *xsdDate `xml:",chardata"`
	}
	layout.T = (*T)(t)
	layout.Value = (*xsdDate)(&layout.T.Value)
	return e.EncodeElement(layout, start)
}
func (t *MyType3) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MyType3
	var overlay struct {
		*T
		Value *xsdDate `xml:",chardata"`
	}
	overlay.T = (*T)(t)
	overlay.Value = (*xsdDate)(&overlay.T.Value)
	return d.DecodeElement(&overlay, &start)
}

type MyType4 struct {
	Title     string    `xml:"http://example.org/ title"`
	Blob      []byte    `xml:"http://example.org/ blob"`
	Timestamp time.Time `xml:"http://example.org/ timestamp"`
}

func (t *MyType4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MyType4
	var layout struct {
		*T
		Blob      *xsdBase64Binary `xml:"http://example.org/ blob"`
		Timestamp *xsdDateTime     `xml:"http://example.org/ timestamp"`
	}
	layout.T = (*T)(t)
	layout.Blob = (*xsdBase64Binary)(&layout.T.Blob)
	layout.Timestamp = (*xsdDateTime)(&layout.T.Timestamp)
	return e.EncodeElement(layout, start)
}
func (t *MyType4) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MyType4
	var overlay struct {
		*T
		Blob      *xsdBase64Binary `xml:"http://example.org/ blob"`
		Timestamp *xsdDateTime     `xml:"http://example.org/ timestamp"`
	}
	overlay.T = (*T)(t)
	overlay.Blob = (*xsdBase64Binary)(&overlay.T.Blob)
	overlay.Timestamp = (*xsdDateTime)(&overlay.T.Timestamp)
	return d.DecodeElement(&overlay, &start)
}

type MyType5 time.Time

func (t *MyType5) UnmarshalText(text []byte) error {
	return (*xsdGDay)(t).UnmarshalText(text)
}
func (t MyType5) MarshalText() ([]byte, error) {
	return xsdGDay(t).MarshalText()
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGDay time.Time

func (t *xsdGDay) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "---02")
}
func (t xsdGDay) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "---02")
}
func (t xsdGDay) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGDay) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
